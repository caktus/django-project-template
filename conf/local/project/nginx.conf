{# Redirect everything to HTTPS #}
server {
    listen 80;
    server_name {{ pillar['domain'] }};
    return 301 https://{{ pillar['domain'] }}$request_uri;
}

server {
    listen 443;
    server_name {{ pillar['domain'] }};
    root {{ public_root }};

    keepalive_timeout 5;

    access_log {{ log_dir }}/access.log;
    error_log {{ log_dir }}/error.log;

    ssl on;
    ssl_certificate {{ ssl_dir }}/{{ pillar['domain'] }}.crt;
    ssl_certificate_key {{ ssl_dir }}/{{ pillar['domain'] }}.key;
    ssl_prefer_server_ciphers   on;
    add_header Strict-Transport-Security max-age=60000;

    if ($host !~* ^({{ pillar['domain'] }}|www.{{ pillar['domain'] }})$) {
        # Deny non-matching Host headers
        return 444;
    }

    location /robots.txt {
        alias {{ public_root }}/static/robots.txt;
    }

    location /media {
        alias {{ public_root }}/media;
    }

    location /static {
        alias {{ public_root }}/static;
        expires max;
    }

    error_page 502 503 504 /502.html;
    location /502.html {
        alias {{ public_root }}/static/502.html;
    }

    location / {
        {% if 'http_auth' in pillar %}
        auth_basic "Restricted";
        auth_basic_user_file {{ auth_file }};
        {% endif %}
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Protocol ssl;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_buffering on;
        proxy_intercept_errors on;
        proxy_pass http://unix:{{ socket }};
    }
}

{# redirect other server names to the real one (http://nginx.org/en/docs/http/converting_rewrite_rules.html under "A redirect to a main site") #}
server {
    listen 80 default_server;
    server_name _;
    return 301 https://{{ pillar['domain'] }}$request_uri;
}
