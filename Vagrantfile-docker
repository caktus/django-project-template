Vagrant.require_version ">= 1.6.0"

Vagrant.configure("2") do |config|
  config.vm.provider "docker" do |d|
    d.cmd = ["/sbin/my_init", "--enable-insecure-key"]
    d.image = "phusion/baseimage"
    d.has_ssh = true
  end

  config.ssh.username = "root"
  config.ssh.private_key_path = "phusion.key"

  config.vm.synced_folder "conf/", "/srv/"

  config.vm.provision :shell, :inline => "sudo rm /usr/sbin/policy-rc.d"
  config.vm.provision :shell, :inline => "sudo apt-get update -qq -y"
  config.vm.provision :shell, :inline => "sudo apt-get install python-pip git-core -qq -y"

  # install salt manually to workaround https://github.com/saltstack/salt-bootstrap/issues/394
  config.vm.provision :shell, :inline => "sudo /srv/bootstrap-salt.sh -M"

  config.vm.provision :salt do |salt|

    # Config Options
    salt.minion_config = "vagrant/minion.conf"
    salt.master_config = "vagrant/master.conf"

    # Bootstrap Options Below
    # See options here:
    #  http://bootstrap.saltstack.org

    # If you need bleeding edge salt
    salt.install_type = "daily"

    # Install a master on this machine
    salt.install_master = true

    # Actions
    # Normally we want to run state.highstate to provision the machine
    salt.run_highstate = false

    # Default will not install / update salt binaries if they are present
    # Use this option to always install
    salt.always_install = false

    # Gives more output, such as from bootstrap script
    salt.verbose = true
  end

  # Need to restart salt-master/minion since the configs were added after
  # salt was installed
  config.vm.provision :shell, :inline => "sudo service salt-master restart"
  config.vm.provision :shell, :inline => "sudo service salt-minion restart"

end
